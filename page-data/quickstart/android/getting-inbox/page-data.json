{"componentChunkName":"component---src-templates-docs-js","path":"/quickstart/android/getting-inbox","webpackCompilationHash":"17f491f66bf6d9355247","result":{"data":{"site":{"siteMetadata":{"title":"JS SDK Documentation | TigerConnect"}},"mdx":{"fields":{"id":"8661d855-1483-5a9c-a5e5-fa0ecf483e9d","title":"Getting the Inbox with the Android SDK","slug":"/quickstart/android/getting-inbox"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting the Inbox with the Android SDK\",\n  \"metaTitle\": \"\",\n  \"metaDescription\": \"\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"After authenticating, the SDK will fetch all the recent conversations associated with the user and persist them in our local datastore.  Assuming that the SDK has been properly initialized and \\\"synced\\\", this is the way you load your roster.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Call getInboxEntries method of the RosterManager to return the list of all the available conversations.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"...\\n// After your SDK has been sync'ed you can call...\\nTT.getInstance().getRosterManager().getInboxEntries(\\\"organizationId\\\", new GenericRosterListener() {\\n    @Override\\n    public void onResults(List<RosterEntry> list) {\\n        // Populate your roster...\\n        // Will register for events in the next step...\\n    }\\n});\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In order to keep your roster list up to date after loading the items, you need to subscribe to some roster related events that the SDK will fire when actions like \\\"Roster Added\\\", \\\"Roster Removed\\\", \\\"Roster Updated\\\", etc take place, in addition to the example above notice the last line in the \\\"onResults\\\" method below.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"...\\n    // Declare roster related events required...\\n    private static final String[] rosterListeners = new String[]{\\n        TTEvent.ROSTER_ENTRY_ADDED,\\n        TTEvent.ROSTER_ENTRY_UPDATED,\\n        TTEvent.ROSTER_ENTRY_REMOVED\\n    };\\n...\\n\\n// After your SDK has been sync'ed you can call...\\nTT.getInstance().getRosterManager().getInboxEntries(\\\"organizationId\\\", new GenericRosterListener() {\\n    @Override\\n    public void onResults(List<RosterEntry> list) {\\n      // Populate your roster...\\n\\n      // Subscribe to roster related events...\\n      TT.getInstance().getTTPubSub().addListeners(RosterActivity.this, rosterListeners);\\n    }\\n});\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Now that we have our roster loaded and we are ready to start listening for roster related events, you are all set for a completely functional roster screen, below is the example of how your RosterActivity might look like.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class RosterActivity extends AppCompatActivity implements TTPubSub.Listener {\\n    //Declare the roster events required...\\n    private static final String[] rosterListeners = new String[]{\\n        TTEvent.ROSTER_ENTRY_ADDED,\\n        TTEvent.ROSTER_ENTRY_UPDATED,\\n        TTEvent.ROSTER_ENTRY_REMOVED\\n    };\\n\\n    ...\\n\\n    private void loadRosterAndRegisterForEvents() {\\n        TT.getInstance().getRosterManager().getInboxEntries(\\\"organizationId\\\", new GenericRosterListener() {\\n            @Override\\n            public void onResults(List<RosterEntry> list) {\\n                //Populate recycler view roster elements...\\n\\n                //Start listening for roster related events\\n                TTPubSub.getInstance().addListeners(RosterActivity.this, rosterListeners);\\n            }\\n        });\\n    }\\n\\n    //This method will be called asynchronously every time the SDK fires an event related to the actions you registered on your pubsub...\\n    @Override\\n    public void onEventReceived(String event, Object data) {\\n        switch (event) {\\n            case TTEvent.ROSTER_ENTRY_ADDED: {\\n                final RosterEntry rosterEntry = (RosterEntry) data;\\n                runOnUiThread(new Runnable() {\\n                    @Override\\n                    public void run() {\\n                        //Do something with the newly created roster entry (add it to the list?)\\n                    }\\n                });\\n            }\\n            break;\\n            case TTEvent.ROSTER_ENTRY_REMOVED: {\\n                final RosterEntry rosterEntry = (RosterEntry) data;\\n                runOnUiThread(new Runnable() {\\n                    @Override\\n                    public void run() {\\n                        //Do something with the removed roster entry (delete it from the list?)\\n                    }\\n                });\\n            }\\n            break;\\n                ...//More events...\\n        }\\n    }\\n\\n    //When your activity is destroyed don't forget to stop listening for events...\\n    @Override\\n    protected void onDestroy() {\\n        super.onDestroy();\\n        TT.getInstance().getTTPubSub().removeListeners(RosterActivity.this, rosterListeners);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Loading the messages in a conversation is very similar to the example above, the only difference is that you would be using the ConversationManager to get the messages (paginated) and the events you will have to subscribe to will be message related events, like \\\"New Message\\\", \\\"Message Recalled\\\", \\\"Message Failed\\\", etc, The list of events fired by the SDK can be found in the TTEvent class.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"TT.getInstance().getConversationManager().getMessagesByPage(rosterEntry, pageSize, topMessage, new GenericActionListener<List<Message>, Throwable>() {\\n    @Override\\n    public void onResult(List<Message> messages) {\\n        // Update your Conversation view with these new messages\\n        messagesLiveData.postValue(messages);\\n    }\\n\\n    @Override\\n    public void onFail(Throwable throwable) {\\n        Timber.e(throwable, \\\"Failed getting messagesLiveData by page\\\");\\n    }\\n});\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"parent":{"__typename":"File","relativePath":"quickstart/android/getting-inbox.mdx"},"frontmatter":{"title":"Getting the Inbox with the Android SDK","metaTitle":"","metaDescription":""}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/events","title":"Events Reference"}}},{"node":{"fields":{"slug":"/api","title":"API Reference"}}},{"node":{"fields":{"slug":"/404","title":"Page Not Found"}}},{"node":{"fields":{"slug":"/","title":"TigerConnect SDK Documentation"}}},{"node":{"fields":{"slug":"/models","title":"Models Reference"}}},{"node":{"fields":{"slug":"/quickstart","title":"Quick Start Guides"}}},{"node":{"fields":{"slug":"/quickstart/android","title":"Android SDK Quick Start Guide"}}},{"node":{"fields":{"slug":"/quickstart/ios","title":"iOS SDK Quick Start Guide"}}},{"node":{"fields":{"slug":"/quickstart/js","title":"JS SDK Quick Start Guide"}}},{"node":{"fields":{"slug":"/models/attachment","title":"Attachment Model"}}},{"node":{"fields":{"slug":"/models/conversation","title":"Conversation Model"}}},{"node":{"fields":{"slug":"/models/messageStatusPerRecipient","title":"MessageStatusPerRecipient Model"}}},{"node":{"fields":{"slug":"/models/distributionList","title":"DistributionList Model"}}},{"node":{"fields":{"slug":"/models/role","title":"Role Model"}}},{"node":{"fields":{"slug":"/models/organization","title":"Organization Model"}}},{"node":{"fields":{"slug":"/models/metadata","title":"Metadata Model"}}},{"node":{"fields":{"slug":"/models/group","title":"Group Model"}}},{"node":{"fields":{"slug":"/quickstart/ios/getting-inbox","title":"Getting the Inbox with the iOS SDK"}}},{"node":{"fields":{"slug":"/models/user","title":"User Model"}}},{"node":{"fields":{"slug":"/quickstart/ios/installation","title":"How to Install the iOS SDK"}}},{"node":{"fields":{"slug":"/quickstart/ios/logging-in","title":"How to Log In to the iOS SDK"}}},{"node":{"fields":{"slug":"/quickstart/ios/logging-out","title":"How to Log Out of the iOS SDK"}}},{"node":{"fields":{"slug":"/quickstart/ios/messages","title":"Messages and the iOS SDK"}}},{"node":{"fields":{"slug":"/quickstart/js/installation","title":"How to Install the JS SDK"}}},{"node":{"fields":{"slug":"/quickstart/js/getting-inbox","title":"Getting Inbox with the JS SDK"}}},{"node":{"fields":{"slug":"/quickstart/ios/realtime-updates","title":"Realtime Updates with the iOS SDK"}}},{"node":{"fields":{"slug":"/quickstart/js/groups","title":"Groups and the JS SDK"}}},{"node":{"fields":{"slug":"/quickstart/js/logging-in","title":"Logging In with the JS SDK"}}},{"node":{"fields":{"slug":"/quickstart/js/logging-out","title":"Logging Out with the JS SDK"}}},{"node":{"fields":{"slug":"/quickstart/js/messages","title":"Messages and the JS SDK"}}},{"node":{"fields":{"slug":"/quickstart/js/processing-events","title":"Processing Events in the JS SDK"}}},{"node":{"fields":{"slug":"/quickstart/android/getting-inbox","title":"Getting the Inbox with the Android SDK"}}},{"node":{"fields":{"slug":"/quickstart/js/realtime-updates","title":"Realtime Updates with the JS SDK"}}},{"node":{"fields":{"slug":"/quickstart/android/installation","title":"How to Install the Android SDK"}}},{"node":{"fields":{"slug":"/quickstart/android/groups","title":"Groups and Forums with the Android SDK"}}},{"node":{"fields":{"slug":"/quickstart/android/logging-out","title":"Logging Out with the Android SDK"}}},{"node":{"fields":{"slug":"/quickstart/android/logging-in","title":"Logging In with the Android SDK"}}},{"node":{"fields":{"slug":"/quickstart/android/messages","title":"Messages and the Android SDK"}}},{"node":{"fields":{"slug":"/events/conversations-loading-start","title":"Event: \"conversations:loading:start\""}}},{"node":{"fields":{"slug":"/quickstart/android/realtime-updates","title":"Realtime Updates with the Android SDK"}}},{"node":{"fields":{"slug":"/quickstart/js/model-lifecycle","title":"Model Lifecycle of the JS SDK"}}},{"node":{"fields":{"slug":"/events/group-membership-change","title":"Event: \"group:membership:change\""}}},{"node":{"fields":{"slug":"/events/signedIn","title":"Event: \"signedIn\""}}},{"node":{"fields":{"slug":"/events/conversations-loading-stop","title":"Event: \"conversations:loading:stop\""}}},{"node":{"fields":{"slug":"/events/typing-change","title":"Event: \"typing:change\""}}},{"node":{"fields":{"slug":"/events/messages-offline-start","title":"Event: \"messages:offline:start\""}}},{"node":{"fields":{"slug":"/events/messages-offline-stop","title":"Event: \"messages:offline:stop\""}}},{"node":{"fields":{"slug":"/__examples/codeblock","title":"Syntax Highlighting"}}},{"node":{"fields":{"slug":"/api/client","title":"Client"}}},{"node":{"fields":{"slug":"/api/conversations","title":"Conversations"}}},{"node":{"fields":{"slug":"/api/events","title":"Events"}}},{"node":{"fields":{"slug":"/api/forums","title":"Forums"}}},{"node":{"fields":{"slug":"/api/groups","title":"Groups"}}},{"node":{"fields":{"slug":"/api/organizations","title":"Organizations"}}},{"node":{"fields":{"slug":"/api/metadata","title":"Metadata"}}},{"node":{"fields":{"slug":"/api/messages","title":"Messages"}}},{"node":{"fields":{"slug":"/api/typingStatus","title":"Typing Status"}}},{"node":{"fields":{"slug":"/api/users","title":"Users"}}},{"node":{"fields":{"slug":"/api/search","title":"Search"}}},{"node":{"fields":{"slug":"/quickstart/js/messages/forwarding","title":"How to Forward Messages"}}},{"node":{"fields":{"slug":"/quickstart/js/messages/expiration","title":"Message Expiration"}}},{"node":{"fields":{"slug":"/models/message","title":"Message Model"}}},{"node":{"fields":{"slug":"/quickstart/js/messages/priority-messages","title":"How to Send A Priority Message"}}},{"node":{"fields":{"slug":"/quickstart/js/messages/sending-attachments","title":"How to Send Messages with Attachments"}}},{"node":{"fields":{"slug":"/quickstart/js/messages/unread-counts","title":"How to Determine Unread Message Counts on the Conversation and Entire Inbox"}}},{"node":{"fields":{"slug":"/quickstart/js/messages/sending","title":"How to Send Messages"}}},{"node":{"fields":{"slug":"/api/typingStatus/startTyping","title":"typingStatus.startTyping()"}}},{"node":{"fields":{"slug":"/api/typingStatus/stopTyping","title":"typingStatus.stopTyping()"}}},{"node":{"fields":{"slug":"/api/users/checkLogin","title":"users.checkLogin()"}}},{"node":{"fields":{"slug":"/api/users/findMe","title":"users.findMe()"}}},{"node":{"fields":{"slug":"/api/users/findMyProfilesForAllOrganizations","title":"users.findMyProfilesForAllOrganizations()"}}},{"node":{"fields":{"slug":"/api/users/removeAutoForward","title":"users.removeAutoForward()"}}},{"node":{"fields":{"slug":"/api/users/setAutoForward","title":"users.setAutoForward()"}}},{"node":{"fields":{"slug":"/api/users/find","title":"users.find()"}}},{"node":{"fields":{"slug":"/api/users/update","title":"users.update()"}}},{"node":{"fields":{"slug":"/api/organizations/find","title":"organizations.find()"}}},{"node":{"fields":{"slug":"/api/organizations/findAll","title":"organizations.findAll()"}}},{"node":{"fields":{"slug":"/api/search/query","title":"search.query()"}}},{"node":{"fields":{"slug":"/api/metadata/fullUpdate","title":"metadata.fullUpdate()"}}},{"node":{"fields":{"slug":"/api/metadata/findMulti","title":"metadata.findMulti()"}}},{"node":{"fields":{"slug":"/api/metadata/update","title":"metadata.update()"}}},{"node":{"fields":{"slug":"/api/metadata/find","title":"metadata.find()"}}},{"node":{"fields":{"slug":"/api/messages/_sendMessageOptions","title":"Common Message Options"}}},{"node":{"fields":{"slug":"/api/messages/downloadAttachment","title":"messages.downloadAttachment()"}}},{"node":{"fields":{"slug":"/api/messages/downloadAttachmentUrl","title":"messages.downloadAttachmentUrl()"}}},{"node":{"fields":{"slug":"/api/messages/endPreviewMessage","title":"messages.endPreviewMessage()"}}},{"node":{"fields":{"slug":"/api/messages/ensureRecipientStatus","title":"messages.ensureRecipientStatus()"}}},{"node":{"fields":{"slug":"/api/messages/findAttachment","title":"messages.findAttachment()"}}},{"node":{"fields":{"slug":"/api/messages/findRecipientStatus","title":"messages.findRecipientStatus()"}}},{"node":{"fields":{"slug":"/api/messages/forwardToConversation","title":"messages.forwardToConversation()"}}},{"node":{"fields":{"slug":"/api/messages/forwardToDistributionList","title":"messages.forwardToDistributionList()"}}},{"node":{"fields":{"slug":"/api/messages/forwardToGroup","title":"messages.forwardToGroup()"}}},{"node":{"fields":{"slug":"/api/messages/forwardToGroupOfUsers","title":"messages.forwardToGroupOfUsers()"}}},{"node":{"fields":{"slug":"/api/messages/forwardToUser","title":"messages.forwardToUser()"}}},{"node":{"fields":{"slug":"/api/messages/forwardToRole","title":"messages.forwardToRole()"}}},{"node":{"fields":{"slug":"/api/messages/previewMessage","title":"messages.previewMessage()"}}},{"node":{"fields":{"slug":"/api/messages/recall","title":"messages.recall()"}}},{"node":{"fields":{"slug":"/api/messages/resend","title":"messages.resend()"}}},{"node":{"fields":{"slug":"/api/messages/retrySend","title":"messages.retrySend()"}}},{"node":{"fields":{"slug":"/api/messages/sendToConversation","title":"messages.sendToConversation()"}}},{"node":{"fields":{"slug":"/api/messages/sendToDistributionList","title":"messages.sendToDistributionList()"}}},{"node":{"fields":{"slug":"/api/messages/sendToGroupOfUsers","title":"messages.sendToGroupOfUsers()"}}},{"node":{"fields":{"slug":"/api/messages/sendToGroup","title":"messages.sendToGroup()"}}},{"node":{"fields":{"slug":"/api/messages/sendToUser","title":"messages.sendToUser()"}}},{"node":{"fields":{"slug":"/api/messages/sendToRole","title":"messages.sendToRole()"}}},{"node":{"fields":{"slug":"/api/forums/find","title":"forums.find()"}}},{"node":{"fields":{"slug":"/api/forums/create","title":"forums.create()"}}},{"node":{"fields":{"slug":"/api/forums/join","title":"forums.join()"}}},{"node":{"fields":{"slug":"/api/forums/findAll","title":"forums.findAll()"}}},{"node":{"fields":{"slug":"/api/groups/addMembers","title":"groups.addMembers()"}}},{"node":{"fields":{"slug":"/api/groups/addMember","title":"groups.addMember()"}}},{"node":{"fields":{"slug":"/api/groups/create","title":"groups.create()"}}},{"node":{"fields":{"slug":"/api/groups/destroy","title":"groups.destroy()"}}},{"node":{"fields":{"slug":"/api/groups/removeMember","title":"groups.removeMember()"}}},{"node":{"fields":{"slug":"/api/groups/findAll","title":"groups.findAll()"}}},{"node":{"fields":{"slug":"/api/groups/removeMembers","title":"groups.removeMembers()"}}},{"node":{"fields":{"slug":"/api/groups/leave","title":"groups.leave()"}}},{"node":{"fields":{"slug":"/api/groups/find","title":"groups.find()"}}},{"node":{"fields":{"slug":"/api/groups/update","title":"groups.update()"}}},{"node":{"fields":{"slug":"/api/events/connect","title":"events.connect()"}}},{"node":{"fields":{"slug":"/api/conversations/find","title":"conversations.find()"}}},{"node":{"fields":{"slug":"/api/conversations/fetchTimeline","title":"conversations.fetchTimeline()"}}},{"node":{"fields":{"slug":"/api/conversations/findAll","title":"conversations.findAll()"}}},{"node":{"fields":{"slug":"/api/conversations/markAsDelivered","title":"conversations.markAsDelivered()"}}},{"node":{"fields":{"slug":"/api/conversations/markAsRead","title":"conversations.markAsRead()"}}},{"node":{"fields":{"slug":"/api/conversations/remove","title":"conversations.remove()"}}},{"node":{"fields":{"slug":"/api/conversations/mute","title":"conversations.mute()"}}},{"node":{"fields":{"slug":"/api/conversations/unmute","title":"conversations.unmute()"}}},{"node":{"fields":{"slug":"/api/conversations/selectConversation","title":"conversations.selectConversation()"}}},{"node":{"fields":{"slug":"/api/client/authenticate","title":"client.authenticate()"}}},{"node":{"fields":{"slug":"/api/client/authenticateUsingOauth","title":"client.authenticateUsingOauth()"}}},{"node":{"fields":{"slug":"/api/conversations/unmuteAll","title":"conversations.unmuteAll()"}}},{"node":{"fields":{"slug":"/api/client/signInWithApiKeyAndSecret","title":"client.signInWithApiKeyAndSecret()"}}},{"node":{"fields":{"slug":"/api/client/signIn","title":"client.signIn()"}}},{"node":{"fields":{"slug":"/api/client/initialize-client","title":"Initializing Client"}}},{"node":{"fields":{"slug":"/api/client/signOut","title":"client.signOut()"}}},{"node":{"fields":{"slug":"/api/client/signOutAllDevices","title":"client.signOutAllDevices()"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"8661d855-1483-5a9c-a5e5-fa0ecf483e9d"}}}